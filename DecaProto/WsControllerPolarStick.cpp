//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Wildstang 2010
//  @ File Name : WsControllerPolarStick.cpp
//  @ Date : 1/17/2009
//  @ Author : 
//
//


#include "WsControllerPolarStick.h"

/**
* Constructs a WsControllerPolarStick
* @param xAxis The axis to treat as the X-Axis
* @param yAxis The axis to treat as the Y-Axis
*/
WsControllerPolarStick::WsControllerPolarStick(Gamepad* gamepad, Gamepad::AxisType xAxis, Gamepad::AxisType yAxis)
{
    ap_gamepad = gamepad;
    a_xAxis = xAxis;
    a_yAxis = yAxis;
}

/**
* Destructs a WsControllerPolarStick
*/
WsControllerPolarStick::~WsControllerPolarStick()
{
}

/**
* Gets the X axis value
* @returns The value of the X axis.  0 if the X axis object is invalid
*/
float WsControllerPolarStick::GetX()
{
    float x = 0;

    if(ap_gamepad != NULL)
    {
        x = ap_gamepad->GetAxis(a_xAxis);
    }

    return x;
}

/**
* Gets the Y axis value
* @returns The value of the Y axis.  0 if the Y axis object is invalid
*/
float WsControllerPolarStick::GetY()
{
    float y = 0;

    if(ap_gamepad != NULL)
    {
        y = ap_gamepad->GetAxis(a_yAxis);
    }

    return y;
}

/**
* Gets the polar radius calculated from the X and Y axes
* @returns The polar radius calculated from the X and Y axes
*/
float WsControllerPolarStick::GetRadius()
{
    float x = 0;
    float y = 0;

    x = GetX();
    y = GetY();

    return calcRadius(x, -y);
}

/**
* Gets the polar angle calculated from the X and Y axes
* @returns The polar angle calculated from the X and Y axes
* \verbatim
The angle returned is on this scale
               0
               |
               |
               |
     -90 ------------- 90
               |
               |
               |
               180 \endverbatim
*/
float WsControllerPolarStick::GetAngle()
{
    float x = 0;
    float y = 0;
    float angle = 0;

    x = GetX();
    y = GetY();

    /* calcAngle returns a value on this scale
                0
                |
                |
                |
      -90 ------------- 90
                |
                |
                |
                180
        */
    angle = calcAngle(-y, x);

    return angle;
}

/**
* Calculates the radius that the x and y coordinates are from the cartesian (0, 0)
* @param x The X axis value
* @param y The Y axis value
* @returns The polar radius
*/
float WsControllerPolarStick::calcRadius(float x, float y)
{
    //Calculate length of line from the center to our actual point
    float inputDistance = sqrt(pow(((float)fabs(x)), 2) + pow(((float)fabs(y)),2));
    if(inputDistance > BOUNDS)
    {
        inputDistance = BOUNDS;
    }
    else if(inputDistance < -BOUNDS)
    {
        inputDistance = -BOUNDS;
    }

    return inputDistance;
#if 0
    // This was copied from someone on CD

    //Convert x-y cartesian coordinate to a polar distance
    //from center.

    float edgePointX, edgePointY;

    //First calculate the slope
    //if one of the values is 0, respond appropriately so that
    //we don't have divide by 0 errors and such
    if(y == 0)
    {
        //If there is no Y factor
        if(x > 0)
            edgePointX = BOUNDS;
        else if(x < 0)
            edgePointX = -BOUNDS;
        else
            //Return 0 if both x and y inputs are 0
            return 0;

        edgePointY = 0;
    }
    else if(x == 0)
    {
        //If there is no X factor
        if(y > 0)
            edgePointY = BOUNDS;
        else if(y < 0)
            edgePointY = -BOUNDS;
        else
            //Return 0 if both x and y inputs are 0
            return 0;

        edgePointX = 0;
    }
    else
    {
        //If we have no 0 in x or y input, calculate slope
        //normally
        float slope = y / x;

        //Project a point along the line of our actual point
        //using the slope	

        if(slope >= 1.0f || slope <= -1.0f)
        {
            //If the point is on the top or bottom bounds
            edgePointX = BOUNDS / slope;
            edgePointY = BOUNDS;
        }
        else
        {
            //If the point is on the side bounds
            edgePointX = BOUNDS;
            edgePointY = BOUNDS * slope;
        }
    }

    //Calculate the length of the line from the center
    //to our edge point
    float edgeDistance = sqrt(pow(fabs(edgePointX), 2) + pow(fabs(edgePointY), 2));

    //Calculate length of line from the center to our actual point
    float inputDistance = sqrt(pow(((float)fabs(x)), 2) + pow(((float)fabs(y)),2));

    //Return the "polar distance" by finding the ratio of these two lines
    //and multiplying by the bound
    return BOUNDS * (inputDistance / edgeDistance);
#endif
}

/**
* Calculates the angle that the cartesian (x, y) has with the cartesian X axis.
* @param x The X axis value
* @param y The Y axis value
* \verbatim
Inputs are expected on this scale
                |
         -x, +y |   +x, +y
                |
          -------------
                |
         -x, -y |   +x, -y
                | \endverbatim
* @returns The polar angle
* \verbatim
The returned angle is on this scale

                0
                |
                |
                |
      -90 ------------- 90
                |
                |
                |
                180 \endverbatim
*/
float WsControllerPolarStick::calcAngle(float x, float y)
{
    float angle = 0;

    /* Expects inputs of 

                |
         -x, +y |   +x, +y
                |
          -------------
                |
         -x, -y |   +x, -y
                |


        Returns an angle on the scale

                0
                |
                |
                |
      -90 ------------- 90
                |
                |
                |
                180
    */

    if((x == 0) && (y == 0))
    {
        angle = 0;
    }
    else
    {
        angle = ATAN2DEG(y, x);
    }

    if(angle >= 360)
    {
        angle -= 360;
    }

    return angle;
}
