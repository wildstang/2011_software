//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : WsUltrasonic.cpp
//  @ Date : 12/14/2010
//  @ Author : 
//
//


#include "WsUltrasonic.h"
#include "Ultrasonic.h"


/**
 * Construst an instance of a WsUltrasonic
 *
 * @param pingChannel The digital channel that the ping will be sent on
 * @param echoChannel The digital channel that the echo will be received on
 * @param units The units of measurement to use (kInches or kMilliMeters)
 */
WsUltrasonic::WsUltrasonic(DigitalOutput* pingChannel, DigitalInput* echoChannel, DistanceUnit units)
    : Ultrasonic(pingChannel, echoChannel, units)
{
    // Turn automatic mode on to start the ping
    SetAutomaticMode(true);
}

/**
 * Construst an instance of a WsUltrasonic
 *
 * @param pingChannel The digital channel that the ping will be sent on
 * @param echoChannel The digital channel that the echo will be received on
 * @param units The units of measurement to use (kInches or kMilliMeters)
 */
WsUltrasonic::WsUltrasonic(DigitalOutput& pingChannel, DigitalInput& echoChannel, DistanceUnit units)
    : Ultrasonic(pingChannel, echoChannel, units)
{
    // Turn automatic mode on to start the ping
    SetAutomaticMode(true);
}

/**
 * Construst an instance of a WsUltrasonic
 *
 * @param pingChannel The digital channel that the ping will be sent on
 * @param echoChannel The digital channel that the echo will be received on
 * @param units The units of measurement to use (kInches or kMilliMeters)
 */
WsUltrasonic::WsUltrasonic(UINT32 pingChannel, UINT32 echoChannel, DistanceUnit units)
    : Ultrasonic(pingChannel, echoChannel, units)
{
    // Turn automatic mode on to start the ping
    SetAutomaticMode(true);
}

/**
 * Construst an instance of a WsUltrasonic
 *
 * @param pingSlot The physical slot the ping will be sent from
 * @param pingChannel The digital channel that the ping will be sent on
 * @param echoSlot The physical slot the ping will be sent from
 * @param echoChannel The digital channel that the echo will be received on
 * @param units The units of measurement to use (kInches or kMilliMeters)
 */
WsUltrasonic::WsUltrasonic(UINT32 pingSlot, UINT32 pingChannel, UINT32 echoSlot, UINT32 echoChannel, DistanceUnit units)
    : Ultrasonic(pingSlot, pingChannel, echoSlot, echoChannel, units)
{
    // Turn automatic mode on to start the ping
    SetAutomaticMode(true);
}

/**
 * Checks to see if the current ultrasonic value is less than or equal to the
 * desired distance
 *
 * @param distance The max distance that will return a true value
 * @return A boolean value for if the current ultrasonic value is less than or
 *         equal to the desired distance
 */
bool WsUltrasonic::IsInRange(double distance)
{
    return IsInRange(0, distance);
}

/**
 * Checks to see if the current ultrasonic value is between min and max
 *
 * @param min The min distance that will return a true value
 * @param max The min distance that will return a true value
 * @return A boolean value for if the current ultrasonic value is between min
 *         and max
 */
bool WsUltrasonic::IsInRange(double min, double max)
{
    return IsNumberInRange(Get(), min, max);

}

/**
 * Checks to see if the number passed in is less than or equal to the
 * desired distance
 *
 * @param distance The max distance that will return a true value
 * @return A boolean value for if the number passed in is less than or
 *         equal to the desired distance
 */
bool WsUltrasonic::IsNumberInRange(double number, double distance)
{
    return IsNumberInRange(number, 0, distance);
}

/**
 * Checks to see if the number passed in is between min and max
 *
 * @param min The min distance that will return a true value
 * @param max The min distance that will return a true value
 * @return A boolean value for if the number passed in is between min
 *         and max
 */
bool WsUltrasonic::IsNumberInRange(double number, double min, double max)
{
    bool inRange = false;

    if((number >= min) && (number <= max))
    {
        inRange = true;
    }

    return inRange;
}

/**
 * This method retuns the current value of the ultrasonic sensor
 * The correct method is called based on the units of the sensor
 *
 * @return The range in the correct units
 */
double WsUltrasonic::Get(void )
{
    double range = 0.0;

    if(GetDistanceUnits() == kInches)
    {
        range = GetRangeInches();
    }
    else
    {
        range = GetRangeMM();
    }

    return range;

}

