//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : WsRollerClaw.cpp
//  @ Date : 1/22/2011
//  @ Author : 
//
//


#include "WsRollerClaw.h"

WsRollerClaw::WsRollerClaw(UINT32 sc,
                           UINT32 tube_release_sol,
                           UINT32 tube_possessed_sw) {
    ap_sc = new Victor(sc);
    ap_tube_release = new Solenoid(tube_release_sol);
    ap_tube_possessed = new DigitalInput(tube_possessed_sw);
    a_snapClawEnabled = false;
    a_clawState = CLAW_RELEASE_DEFAULT_OUTPUT_STATE;
}

WsRollerClaw::~WsRollerClaw() {
    delete ap_sc;
    ap_sc = NULL;

    delete ap_tube_release;
    ap_tube_release = NULL;

    delete ap_tube_possessed;
    ap_tube_possessed = NULL;
}

void WsRollerClaw::setReleaseState(ReleaseStateT state) {
    bool outState = a_clawState;

    if(state == CLAW_OPEN)
    {
        a_snapClawEnabled = false;
        outState = CLAW_RELEASE_OUTPUT_OPEN;
    }
    else if(state == CLAW_CLOSE)
    {
        a_snapClawEnabled = false;
        outState = CLAW_RELEASE_OUTPUT_CLOSED;
    }

    if((a_snapClawEnabled == true) && (getTubePossessed() == true))
    {
        outState = CLAW_RELEASE_OUTPUT_CLOSED;
        a_snapClawEnabled = false;
    }

    //printf("out %d snap %d state %d\n", outState, a_snapClawEnabled, state);
    a_clawState = outState;
    ap_tube_release->Set(outState);
}

void WsRollerClaw::setRollerSpeed(float speed) {
    ap_sc->Set(speed);
}

bool WsRollerClaw::getTubePossessed(void ) {
    return (ap_tube_possessed->Get() == TUBE_POSSESSED);
}

void WsRollerClaw::setSnapClawEnabled(bool enabled)
{
    a_snapClawEnabled = enabled;
}

void WsRollerClaw::reset(void ) {
    a_clawState = CLAW_RELEASE_DEFAULT_OUTPUT_STATE;
    a_snapClawEnabled = false;
    ap_sc->Set(ROLLER_CLAW_SPEED_OFF);
    setReleaseState(CLAW_RELEASE_DEFAULT_CMD);
}
