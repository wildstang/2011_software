//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : WsDriveBase6WD.h
//  @ Date : 1/24/2011
//  @ Author : 
//
//


#if !defined(_WSDRIVEBASE6WD_H)
#define _WSDRIVEBASE6WD_H

#include <stdio.h>
#include "WPILib.h"
#include "WsDriveVector.h"

#define SHIFTER_OUTPUT_LOW  true
#define SHIFTER_OUTPUT_HIGH false

class SpeedController;
class WsEncoder;
class Solenoid;
class WsCalibration;
class WsPid;
class WsGyro;

class WsDriveBase6WD
{
public:
    typedef enum{
        ENC_LOC_L,
        ENC_LOC_R
    } EncoderLocationT;

    typedef enum
    {
        SHIFT_STATE_NONE,
        SHIFT_STATE_LOW,
        SHIFT_STATE_HIGH
    } ShifterStateT;

    static const ShifterStateT DEFAULT_SHIFTER_STATE = SHIFT_STATE_HIGH;

    WsDriveBase6WD(UINT32 driveL1_sc, UINT32 driveL2_sc, 
                   UINT32 driveR1_sc, UINT32 driveR2_sc, 
                   UINT32 encoder_lA, UINT32 encoder_lB,
                   UINT32 encoder_rA, UINT32 encoder_rB,
                   UINT32 gyroChannel,
                   UINT32 shift_sol);
    ~WsDriveBase6WD(void );

    void setVector(float speed, float turnRate, bool useDriveStraight, bool useCheesy);
    //void setVectorNonCheesy(float speed, float turnRate, bool useDriveStraight);
    //void setVector(WsDriveVector *p_driveVector, bool useDriveStraight);
    void setShifter(WsDriveBase6WD::ShifterStateT state);

    void readSensors(void);
    void readGyro(void);
    void readEncoders(void);


    WsEncoder* getEncoder(EncoderLocationT encLoc);
    INT32 getEncoderValue(EncoderLocationT encLoc);
    float getGyroAngle(void);
    void reset();
    void resetGyro(void);
    void resetEncoder(EncoderLocationT encLoc);
    float applyAcceleration(float speed, float prevSpeed);

    void dashGetOutputSpeeds(float *leftSpeed, float *rightSpeed);
    void dashGetEncoderVals(INT32 *leftEnc, INT32 *rightEnc);
    float dashGetGyroAngle();
    bool dashGetShifter();
    void dashGetDriveStraightParams(float *cmd_left,
                                    float *cmd_right,
                                    float *adj_left,
                                    float *adj_right,
                                    INT32 *enc_snap,
                                    INT32 *enc_diff);



protected:
    SpeedController* ap_scLeft1;
    SpeedController* ap_scLeft2;
    SpeedController* ap_scRight1;
    SpeedController* ap_scRight2;
    Solenoid* ap_shifter;

    WsEncoder* ap_encL;
    WsEncoder* ap_encR;
    WsGyro* ap_gyro;

    WsCalibration* ap_calib;
    INT32 a_curEncLeft;
    INT32 a_curEncRight;
    float a_prevLSpeed;
    float a_prevRSpeed;
    float a_accelerationFactor;

    INT32 a_currEncDiff;
    float a_cmdSpeedLeft;
    float a_cmdSpeedRight;
    float a_adjSpeedLeft;
    float a_adjSpeedRight;

    WsPid* ap_driveStraightLowPid;
    WsPid* ap_driveStraightHighPid;
    WsPid* ap_driveStraightPid;

    float a_driveStraightLowLeftScale;
    float a_driveStraightLowRightScale;
    float a_driveStraightHighLeftScale;
    float a_driveStraightHighRightScale;

    bool  a_driveStraightSnapFlag;
    float a_snappedGyro;
    float a_driveStraightScaleFactor;
    
    WsDriveVector* a_prevDriveVector;
    float a_cachedGyroAngle;
    ShifterStateT a_shifterState;
    
    void driveStraight(float* leftSpeed, float* rightSpeed);
    void driveStraightOld(float* leftSpeed, float* rightSpeed);
};

#endif  //_WSDRIVEBASE6WD_H
