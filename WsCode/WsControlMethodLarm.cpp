//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : WsControlMethodLarm.cpp
//  @ Date : 2/2/2011
//  @ Author : 
//
//


#include <math.h>
#include "WsControlMethodLarm.h"
#include "InputManager.h"

WsControlMethodLarm::WsControlMethodLarm()
{
    ap_inputManager = InputManager::Instance();
    a_larmPosition = WsLarm::POSITION_NONE;
    a_larmMode = LARM_MODE_MANUAL;
    a_latchOutSlow = false;
}

WsControlMethodLarm::~WsControlMethodLarm()
{

}

WsRollerClaw::RollerSpeedT WsControlMethodLarm::getRollerClawCmd(void )
{
	WsRollerClaw::RollerSpeedT cmd = WsRollerClaw::ROLLER_OFF;

    if (ap_inputManager->GetButtonValue(InputManager::BUTTON_INDEX_ROLLER_CLAW_IN))
    {
        cmd = WsRollerClaw::ROLLER_IN;
        a_latchOutSlow = false;
    }
    else if (ap_inputManager->GetButtonValue(InputManager::BUTTON_INDEX_ROLLER_CLAW_OUT))
    {
        if((ap_inputManager->GetButtonValue(InputManager::BUTTON_INDEX_SCORE_TUBE)) ||
           (a_latchOutSlow == true))
        {
            cmd = WsRollerClaw::ROLLER_OUT_SLOW;
            a_latchOutSlow = true;
        }
        else
        {
            // technically covered by the || true from above so could just
            // be directly in the else
            if(a_latchOutSlow == false)
            {
                cmd = WsRollerClaw::ROLLER_OUT;
            }
        }
    }
    else
    {
        a_latchOutSlow = false;
    }

    return cmd;
}

WsRollerClaw::ReleaseStateT WsControlMethodLarm::getClawReleaseState(void )
{
    WsRollerClaw::ReleaseStateT cmd = WsRollerClaw::CLAW_HOLD;
    GamepadDPad::DPadDirection dir = ap_inputManager->GetDPadValue(InputManager::DPAD_INDEX_MANIPULATOR);

    if (ap_inputManager->GetButtonValue(InputManager::BUTTON_INDEX_SCORE_TUBE) == true)
    {
        if(ap_inputManager->GetButtonValue(InputManager::BUTTON_INDEX_ROLLER_CLAW_OUT) == true)
        {
            cmd = WsRollerClaw::CLAW_OPEN;
        }
        else
        {
            cmd = WsRollerClaw::CLAW_CLOSE;
        }
    }
    else if (dir == InputManager::DPAD_DIR_CLAW_CLOSE)
    {
        cmd = WsRollerClaw::CLAW_CLOSE;
    }
    else if (dir == InputManager::DPAD_DIR_CLAW_OPEN)
    {
        cmd = WsRollerClaw::CLAW_OPEN;
    }

    return cmd;
}

float WsControlMethodLarm::getArmSpeed(void )
{
    float speed = 0.0;

    if (ap_inputManager->GetButtonValue(InputManager::BUTTON_INDEX_SCORE_TUBE) == true)
    {
    	speed = WsArm::SCORE_TUBE_SPEED;
    }
    else
    {
        speed = ap_inputManager->GetAxisValue(InputManager::AXIS_INDEX_ARM);
        speed *= MANUAL_ARM_SCALE_FACTOR;
    }
    return speed;
}

float WsControlMethodLarm::getLiftSpeed(void )
{
    float speed = 0.0;
    speed = ap_inputManager->GetAxisValue(InputManager::AXIS_INDEX_LIFT);
    return speed;
}

WsLarm::PositionT WsControlMethodLarm::getLarmPosition(void )
{
    return a_larmPosition;
}

void WsControlMethodLarm::readAutoLarmInputs(void )
{
    if(ap_inputManager->GetButtonValue(InputManager::BUTTON_INDEX_LARM_POS_HOME))
    {
        a_larmPosition = WsLarm::POSITION_HOME;
    }
    else if(ap_inputManager->GetButtonValue(InputManager::BUTTON_INDEX_LARM_POS_FLOOR))
    {
        a_larmPosition = WsLarm::POSITION_PICKUP_FLOOR;
    }
    else if(ap_inputManager->GetButtonValue(InputManager::BUTTON_INDEX_LARM_POS_SCORE_LOW1))
    {
        a_larmPosition = WsLarm::POSITION_SCORE_LOW1;
    }
    else if(ap_inputManager->GetButtonValue(InputManager::BUTTON_INDEX_LARM_POS_SCORE_MID1))
    {
        a_larmPosition = WsLarm::POSITION_SCORE_MID1;
    }
    else if(ap_inputManager->GetButtonValue(InputManager::BUTTON_INDEX_LARM_POS_SCORE_HIGH1))
    {
        a_larmPosition = WsLarm::POSITION_SCORE_HIGH1;
    }
    else if(ap_inputManager->GetButtonValue(InputManager::BUTTON_INDEX_LARM_POS_SCORE_LOW2))
    {
        a_larmPosition = WsLarm::POSITION_SCORE_LOW2;
    }
    else if(ap_inputManager->GetButtonValue(InputManager::BUTTON_INDEX_LARM_POS_SCORE_MID2))
    {
        a_larmPosition = WsLarm::POSITION_SCORE_MID2;
    }
    else if(ap_inputManager->GetButtonValue(InputManager::BUTTON_INDEX_LARM_POS_SCORE_HIGH2))
    {
        a_larmPosition = WsLarm::POSITION_SCORE_HIGH2;
    }
}

WsControlMethodLarm::LarmModeT WsControlMethodLarm::getLarmMode(void )
{
    if((fabs(getArmSpeed()) >= .05) || 
       (fabs(getLiftSpeed()) >= .05) ||
       (ap_inputManager->GetButtonValue(InputManager::BUTTON_INDEX_SCORE_TUBE) == true)) 
    {
        a_larmMode = LARM_MODE_MANUAL;
    }
    else
    {
        readAutoLarmInputs();

        if(a_larmPosition != WsLarm::POSITION_NONE)
        {
            a_larmMode = LARM_MODE_AUTO;
        }
    }

    if(a_larmMode == LARM_MODE_MANUAL)
    {
        a_larmPosition = WsLarm::POSITION_NONE;
    }

    return a_larmMode;
}

void WsControlMethodLarm::reset(void)
{
    a_larmMode = LARM_MODE_MANUAL;
    a_larmPosition = WsLarm::POSITION_NONE;
    a_latchOutSlow = false;
}
