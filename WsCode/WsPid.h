//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Wildstang 2009
//  @ File Name : WsPid.h
//  @ Date : 1/14/2009
//  @ Author : 
//
//


#if !defined(_WSPID_H)
#define _WSPID_H

#include <stdio.h>

class WsPid
{
public:
    WsPid(float p = 0.0, float i = 0.0, float d = 0.0, int epsilon = 0, int staticEpsilon = 0);
    ~WsPid();

    float getP(void);
    float getI(void);
    float getD(void);
    int   getEpsilon(void);
    int   getStaticEpsilon(void);
    int   getDesiredValue(void);

    void setConstants(float p, float i, float d);
    void setStaticEpsilon(int epsilon);
    void setErrorEpsilon(int epsilon);
    void setErrorIncrement(int inc);
    void setDesiredValue(int val);
    void setMaxOutput(float max);
    void setMaxIntegral(float max);
    void setIntegralErrorThresh(int thresh);
    void resetErrorSum(void);

    float calcPid(int current);
    float calcPid(int current, int desired);

    bool isDone(void);
    void setMinDoneCycles(int n);

    void setDebug(bool debug);


private:
    float a_p;   // P coefficient
    float a_i;   // I coefficient
    float a_d;   // D coefficient

    int a_desiredValue; // Desired value
    int a_previousValue; // Value at last call
    int a_errorSum; // Sum of previous errors (for I calculation)
    int a_errorIncrement; // Max increment to error sum each call
    int a_errorEpsilon; // Allowable error in determining when done
    int a_staticEpsilon; // Allowable error in steady state.  Used to account for small acceptable motor backdrive
    float a_maxIntegral;
    int a_integralErrorThresh;

    bool a_firstCycle; // Flag for first cycle
    float a_maxOutput; // Ceiling on calculation output

    int a_minCycleCount; // Minimum number of cycles in epsilon range to be done
    int a_cycleCount; // Current number of cycles in epsilon range

    bool a_allowStaticEpsilon;

    bool a_debug;
};

#endif  //_WSPID_H
