//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : WsLarm.h
//  @ Date : 1/22/2011
//  @ Author : 
//
//


#if !defined(_WSLARM_H)
#define _WSLARM_H

#include "WsRollerClaw.h"
#include "WsArm.h"
class WsLift;
class WsArm;



class WsLarm {
public:
    INT32 LARM_POS_HOME_ARM;
    INT32 LARM_POS_HOME_LIFT;

    INT32 LARM_POS_FLOOR_ARM;
    INT32 LARM_POS_FLOOR_LIFT;

    INT32 LARM_POS_SCORE_LOW1_ARM;
    INT32 LARM_POS_SCORE_LOW1_LIFT;

    INT32 LARM_POS_SCORE_MID1_ARM;
    INT32 LARM_POS_SCORE_MID1_LIFT;

    INT32 LARM_POS_SCORE_HIGH1_ARM;
    INT32 LARM_POS_SCORE_HIGH1_LIFT;

    INT32 LARM_POS_SCORE_LOW2_ARM;
    INT32 LARM_POS_SCORE_LOW2_LIFT;

    INT32 LARM_POS_SCORE_MID2_ARM;
    INT32 LARM_POS_SCORE_MID2_LIFT;

    INT32 LARM_POS_SCORE_HIGH2_ARM;
    INT32 LARM_POS_SCORE_HIGH2_LIFT;

    INT32 LARM_POS_RELEASE_LOW1_ARM;
    INT32 LARM_POS_RELEASE_LOW1_LIFT;

    INT32 LARM_POS_RELEASE_MID1_ARM;
    INT32 LARM_POS_RELEASE_MID1_LIFT;

    INT32 LARM_POS_RELEASE_HIGH1_ARM;
    INT32 LARM_POS_RELEASE_HIGH1_LIFT;

    INT32 LARM_POS_RELEASE_LOW2_ARM;
    INT32 LARM_POS_RELEASE_LOW2_LIFT;

    INT32 LARM_POS_RELEASE_MID2_ARM;
    INT32 LARM_POS_RELEASE_MID2_LIFT;

    INT32 LARM_POS_RELEASE_HIGH2_ARM;
    INT32 LARM_POS_RELEASE_HIGH2_LIFT;


    typedef enum
    {
        POSITION_NONE,
        POSITION_HOME,
        POSITION_PICKUP_FLOOR,
        POSITION_SCORE_LOW1,
        POSITION_SCORE_MID1,
        POSITION_SCORE_HIGH1,
        POSITION_SCORE_LOW2,
        POSITION_SCORE_MID2,
        POSITION_SCORE_HIGH2,
        POSITION_RELEASE_LOW1,
        POSITION_RELEASE_MID1,
        POSITION_RELEASE_HIGH1,
        POSITION_RELEASE_LOW2,
        POSITION_RELEASE_MID2,
        POSITION_RELEASE_HIGH2,
        POSITION_RAISE_HIGH1,
    } PositionT;

    WsLarm(WsLift* p_lift, WsArm* p_arm, WsRollerClaw* p_rollerClaw);
    ~WsLarm();
    void setLiftSpeed(float speed, bool overrideLimits);
    void setArmSpeed(float speed, bool overrideLimits);
    void setRollerSpeed(WsRollerClaw::RollerSpeedT cmd);
    void setClawReleaseState(WsRollerClaw::ReleaseStateT state);
    void setPosition(PositionT position);
    bool getTubePossessed(void );
    bool isInPosition(void );
    INT32 getArmPot(void );
    INT32 getLiftEncoder(void );
    void reset(void );

    INT32 dashGetArmSetpoint();
    INT32 dashGetLiftSetpoint();
    UINT32 dashGetLarmPosition();
    bool dashGetArmInPosition();
    bool dashGetLiftInPosition();
    bool dashGetTubePoss();
    float dashGetArmAngle();
    INT32 dashGetLiftEncoder();
    INT32 dashGetArmPot();
    bool dashGetLiftSwBot();
    bool dashGetLiftSwTop();


protected:
    WsLift *ap_lift;
    WsArm *ap_arm;
    WsRollerClaw *ap_rollerClaw;
    PositionT a_cachedLarmPosition;
};

#endif  //_WSLARM_H
