
//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : WsLarm.cpp
//  @ Date : 1/22/2011
//  @ Author : 
//
//


#include "WsLarm.h"
#include "WsArm.h"
#include "WsRollerClaw.h"
#include "WsLift.h"

#define DISABLE_ARM_FEEDBACK    0
#define DISABLE_LIFT_FEEDBACK   0

WsLarm::WsLarm(WsLift* p_lift, WsArm* p_arm, WsRollerClaw* p_rollerClaw) {
    ap_lift = p_lift;
    ap_arm = p_arm;
    ap_rollerClaw = p_rollerClaw;

    LARM_POS_HOME_ARM = 70;
    LARM_POS_HOME_LIFT = 50;

    LARM_POS_FLOOR_ARM = -30;
    LARM_POS_FLOOR_LIFT = 0;

    LARM_POS_SCORE_LOW1_ARM = 17;
    LARM_POS_SCORE_LOW1_LIFT = 0;

    LARM_POS_SCORE_MID1_ARM = 50;
    //LARM_POS_SCORE_MID1_LIFT = 184; // PROTO
    LARM_POS_SCORE_MID1_LIFT = 250;

    LARM_POS_SCORE_HIGH1_ARM = 50;
    //LARM_POS_SCORE_HIGH1_LIFT = 720;  //PROTO
    LARM_POS_SCORE_HIGH1_LIFT = 755;

    LARM_POS_SCORE_LOW2_ARM = 30;
    LARM_POS_SCORE_LOW2_LIFT = 0;

    LARM_POS_SCORE_MID2_ARM = 47;
    LARM_POS_SCORE_MID2_LIFT = 367;

    LARM_POS_SCORE_HIGH2_ARM = 50;
    LARM_POS_SCORE_HIGH2_LIFT = 882;


    LARM_POS_RELEASE_LOW1_ARM = -15;
    LARM_POS_RELEASE_LOW1_LIFT = 0;

    LARM_POS_RELEASE_MID1_ARM = 27;
    LARM_POS_RELEASE_MID1_LIFT = 184;

    LARM_POS_RELEASE_HIGH1_ARM = 30;
    LARM_POS_RELEASE_HIGH1_LIFT = 720;

    LARM_POS_RELEASE_LOW2_ARM = -2;
    LARM_POS_RELEASE_LOW2_LIFT = 0;

    LARM_POS_RELEASE_MID2_ARM = 27;
    LARM_POS_RELEASE_MID2_LIFT = 325;

    LARM_POS_RELEASE_HIGH2_ARM = 30;
    LARM_POS_RELEASE_HIGH2_LIFT = 882;


}

WsLarm::~WsLarm() {

}

void WsLarm::setLiftSpeed(float speed, bool overrideLimits) {
    ap_lift->setSpeed(speed, false, overrideLimits);
    ap_rollerClaw->setSnapClawEnabled(false);
    a_cachedLarmPosition = POSITION_NONE;
}

void WsLarm::setArmSpeed(float speed, bool overrideLimits) {
    ap_arm->setSpeed(speed, false, overrideLimits);
    ap_rollerClaw->setSnapClawEnabled(false);
    a_cachedLarmPosition = POSITION_NONE;
}

void WsLarm::setRollerSpeed(WsRollerClaw::RollerSpeedT cmd) {
    float speed = WsRollerClaw::ROLLER_CLAW_SPEED_OFF;
    
    switch (cmd) {
    
    case WsRollerClaw::ROLLER_IN:
        speed = WsRollerClaw::ROLLER_CLAW_SPEED_IN;
        break;
    
    case WsRollerClaw::ROLLER_OUT:
        speed = WsRollerClaw::ROLLER_CLAW_SPEED_OUT;
        break;
    
    case WsRollerClaw::ROLLER_OUT_SLOW:
        speed = WsRollerClaw::ROLLER_CLAW_SPEED_OUT_SLOW;
        break;
    
    case WsRollerClaw::ROLLER_OFF:
        speed = WsRollerClaw::ROLLER_CLAW_SPEED_OFF;
        break;
        
    default:
        speed = WsRollerClaw::ROLLER_CLAW_SPEED_OFF;
        break;
    }
    ap_rollerClaw->setRollerSpeed(speed);
}

void WsLarm::setClawReleaseState(WsRollerClaw::ReleaseStateT state)
{
    ap_rollerClaw->setReleaseState(state);
}

void WsLarm::setPosition(PositionT position) {
    bool moveLarm = true;
    float armAngle;
    INT32 liftHeight;

    if (position != a_cachedLarmPosition)
    {
        //printf("RESET ");
        ap_arm->resetErrorSum();
        ap_lift->resetErrorSum();
    }

    switch(position)
    {
        case POSITION_HOME:
            armAngle   = LARM_POS_HOME_ARM;
            liftHeight = LARM_POS_HOME_LIFT;
            ap_rollerClaw->setReleaseState(WsRollerClaw::CLAW_CLOSE);
            ap_rollerClaw->setSnapClawEnabled(false);
            break;
        case POSITION_PICKUP_FLOOR:
            armAngle   = LARM_POS_FLOOR_ARM;
            liftHeight = LARM_POS_FLOOR_LIFT;
            if (position != a_cachedLarmPosition)
            {
                ap_rollerClaw->setReleaseState(WsRollerClaw::CLAW_OPEN);
                ap_rollerClaw->setSnapClawEnabled(true);
            }
            break;
        case POSITION_SCORE_LOW1:
            armAngle = LARM_POS_SCORE_LOW1_ARM;
            liftHeight = LARM_POS_SCORE_LOW1_LIFT;
            ap_rollerClaw->setReleaseState(WsRollerClaw::CLAW_CLOSE);
            ap_rollerClaw->setSnapClawEnabled(false);
            break;
        case POSITION_SCORE_MID1:
            armAngle = LARM_POS_SCORE_MID1_ARM;
            liftHeight = LARM_POS_SCORE_MID1_LIFT;
            ap_rollerClaw->setReleaseState(WsRollerClaw::CLAW_CLOSE);
            ap_rollerClaw->setSnapClawEnabled(false);
            break;
        case POSITION_SCORE_HIGH1:
            armAngle = LARM_POS_SCORE_HIGH1_ARM;
            liftHeight = LARM_POS_SCORE_HIGH1_LIFT;
            ap_rollerClaw->setReleaseState(WsRollerClaw::CLAW_CLOSE);
            ap_rollerClaw->setSnapClawEnabled(false);
            break;
        case POSITION_SCORE_LOW2:
            armAngle = LARM_POS_SCORE_LOW2_ARM;
            liftHeight = LARM_POS_SCORE_LOW2_LIFT;
            ap_rollerClaw->setReleaseState(WsRollerClaw::CLAW_CLOSE);
            ap_rollerClaw->setSnapClawEnabled(false);
            break;
        case POSITION_SCORE_MID2:
            armAngle = LARM_POS_SCORE_MID2_ARM;
            liftHeight = LARM_POS_SCORE_MID2_LIFT;
            ap_rollerClaw->setReleaseState(WsRollerClaw::CLAW_CLOSE);
            ap_rollerClaw->setSnapClawEnabled(false);
            break;
        case POSITION_SCORE_HIGH2:
            armAngle = LARM_POS_SCORE_HIGH2_ARM;
            liftHeight = LARM_POS_SCORE_HIGH2_LIFT;
            ap_rollerClaw->setReleaseState(WsRollerClaw::CLAW_CLOSE);
            ap_rollerClaw->setSnapClawEnabled(false);
            break;
        case POSITION_RELEASE_LOW1:
            armAngle = LARM_POS_RELEASE_LOW1_ARM;
            liftHeight = LARM_POS_RELEASE_LOW1_LIFT;
            ap_rollerClaw->setReleaseState(WsRollerClaw::CLAW_CLOSE);
            ap_rollerClaw->setSnapClawEnabled(false);
            break;
        case POSITION_RELEASE_MID1:
            armAngle = LARM_POS_RELEASE_MID1_ARM;
            liftHeight = LARM_POS_RELEASE_MID1_LIFT;
            ap_rollerClaw->setReleaseState(WsRollerClaw::CLAW_CLOSE);
            ap_rollerClaw->setSnapClawEnabled(false);
            break;
        case POSITION_RELEASE_HIGH1:
            armAngle = LARM_POS_RELEASE_HIGH1_ARM;
            liftHeight = LARM_POS_RELEASE_HIGH1_LIFT;
            ap_rollerClaw->setReleaseState(WsRollerClaw::CLAW_CLOSE);
            ap_rollerClaw->setSnapClawEnabled(false);
            break;
        case POSITION_RELEASE_LOW2:
            armAngle = LARM_POS_RELEASE_LOW2_ARM;
            liftHeight = LARM_POS_RELEASE_LOW2_LIFT;
            ap_rollerClaw->setReleaseState(WsRollerClaw::CLAW_CLOSE);
            ap_rollerClaw->setSnapClawEnabled(false);
            break;
        case POSITION_RELEASE_MID2:
            armAngle = LARM_POS_RELEASE_MID2_ARM;
            liftHeight = LARM_POS_RELEASE_MID2_LIFT;
            ap_rollerClaw->setReleaseState(WsRollerClaw::CLAW_CLOSE);
            ap_rollerClaw->setSnapClawEnabled(false);
            break;
        case POSITION_RELEASE_HIGH2:
            armAngle = LARM_POS_RELEASE_HIGH2_ARM;
            liftHeight = LARM_POS_RELEASE_HIGH2_LIFT;
            ap_rollerClaw->setReleaseState(WsRollerClaw::CLAW_CLOSE);
            ap_rollerClaw->setSnapClawEnabled(false);
            break;
        case POSITION_RAISE_HIGH1:
            armAngle = LARM_POS_HOME_ARM;
            liftHeight = LARM_POS_SCORE_HIGH1_LIFT;
            ap_rollerClaw->setReleaseState(WsRollerClaw::CLAW_CLOSE);
            ap_rollerClaw->setSnapClawEnabled(false);
            break;

        case POSITION_NONE:
            moveLarm = false;
            break;
        default:
            moveLarm = false;
            break;
    }

    a_cachedLarmPosition = position;

    if(ap_lift->isEncoderInitialized() == false)
    {
        moveLarm = false;
    }
#if !DISABLE_LIFT_FEEDBACK
#endif

    if(moveLarm == true)
    {
#if DISABLE_ARM_FEEDBACK
        ap_arm->setSpeed(0, false, false);
#else
        ap_arm->setAngle(armAngle);
#endif
#if DISABLE_LIFT_FEEDBACK
        ap_lift->setSpeed(0, false, false);
#else
        ap_lift->setHeight(liftHeight);
#endif
    }
    else
    {
        ap_arm->setSpeed(0, false, false);
        ap_lift->setSpeed(0, false, false);
    }
}

void WsLarm::reset(void ) {
    ap_rollerClaw->reset();
    ap_arm->reset();
    ap_lift->reset();
}

bool WsLarm::getTubePossessed(void ) {
    return ap_rollerClaw->getTubePossessed();
}

bool WsLarm::isInPosition(void )
{
    bool armInPosition = ap_arm->isInPosition();
    bool liftInPosition = ap_lift->isInPosition();
#if DISABLE_ARM_FEEDBACK
        armInPosition = true;
#endif
#if DISABLE_LIFT_FEEDBACK
        liftInPosition = true;
#endif
    return (armInPosition && liftInPosition);
}

INT32 WsLarm::getArmPot(void ) {
    return ap_arm->getPotValue();
}

INT32 WsLarm::getLiftEncoder(void ) {
    return ap_lift->getEncoderValue();
}

INT32 WsLarm::dashGetArmSetpoint()
{
    return ap_arm->dashGetArmSetpoint();
}

INT32 WsLarm::dashGetLiftSetpoint()
{
    return ap_lift->dashGetLiftSetpoint();
}

UINT32 WsLarm::dashGetLarmPosition()
{
    return a_cachedLarmPosition;
}

bool WsLarm::dashGetArmInPosition()
{
    return ap_arm->dashGetArmInPosition();
}

bool WsLarm::dashGetLiftInPosition()
{
    return ap_lift->dashGetLiftInPosition();
}

bool WsLarm::dashGetTubePoss(void) {
    return getTubePossessed();
}


float WsLarm::dashGetArmAngle()
{
    return ap_arm->dashGetArmAngle();
}


INT32 WsLarm::dashGetLiftEncoder()
{
    return ap_lift->getEncoderValue();
}

INT32 WsLarm::dashGetArmPot()
{
    return ap_arm->dashGetArmPot();
}

bool WsLarm::dashGetLiftSwBot()
{
    return ap_lift->dashGetLiftSwBot();
}

bool WsLarm::dashGetLiftSwTop()
{
    return ap_lift->dashGetLiftSwTop();
}
