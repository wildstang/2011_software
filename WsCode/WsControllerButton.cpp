//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Wildstang 2010
//  @ File Name : WsControllerButton.cpp
//  @ Date : 1/14/2009
//  @ Author : 
//
//


#include "WsControllerButton.h"
#include "Joystick.h"
#include "Gamepad.h"
#include "DriverStation.h"

/**
* Constructs a WsControllerButton
*/
WsControllerButton::WsControllerButton()
{
    WsControllerBase();
}

/**
* Constructs a WsControllerButton
* @param p_js The joystick to read the button from
* @param button The button number to read
*/
WsControllerButton::WsControllerButton(Joystick* p_js, UINT32 button)
{
    WsControllerBase();
    ap_joystick = p_js;
    a_buttonNum = button;
}

/**
* Constructs a WsControllerButton
* @param p_pad The gamepad to read the button from
* @param button The button number to read
*/
WsControllerButton::WsControllerButton(Gamepad* p_pad, UINT32 button)
{
    WsControllerBase();
    ap_gamepad = p_pad;
    a_buttonNum = button;
}

WsControllerButton::WsControllerButton(Gamepad* p_pad, Gamepad::ButtonType button)
{
    WsControllerBase();
    ap_gamepad = p_pad;
    a_buttonNum = Gamepad::GetButtonNumber(button);
}

/**
* Constructs a WsControllerButton
* @param p_pad The gamepad to read the button from
* @param button The button number to read
*/
WsControllerButton::WsControllerButton(Gamepad* p_pad, GamepadDPad::DPadDirection direction)
{
    WsControllerBase();
    ap_gamepad = p_pad;
    a_dpadDir = direction;
}

/**
* Constructs a WsControllerButton
* @param channel The DS channel to use as input
*/
WsControllerButton::WsControllerButton(UINT32 channel)
{
    WsControllerBase();
    ap_ds = DriverStation::GetInstance();
    a_channelNum = channel;
}

/**
* Destructs a WsControllerButton
*/
WsControllerButton::~WsControllerButton()
{
}

/**
* This is overriden by child classes as needed to reset any stored internal state.  The default does nothing
*/
void WsControllerButton::ResetState(void)
{
    // nothing to do here.  the child class will override as needed
}

/**
* Gets the state of the button
* @returns The state of the button
*/
bool WsControllerButton::GetState(void )
{
    return GetButtonState(a_buttonNum, a_channelNum, a_dpadDir);
}

/**
* Performs a boolean inversion if the invert flag is set
* @returns The inverted state if the flag is set, otherwise the original state
*/
bool WsControllerButton::ApplyInvert(bool state)
{
    /* Check the inversion flag and return the altered state */
    //return state ^ a_invert;
    if(a_invert == true)
    {
        return !state;
    }
    return state;
}

/**
* Reads the button state from the device passed in during construction.  Inversion is also performed if needed.
* @returns The state of the button (after possible inversion)
*/
bool WsControllerButton::GetButtonState(UINT32 buttonNum, UINT32 channelNum,
                                        GamepadDPad::DPadDirection direction)
{
    bool state = false;

    if (ap_joystick != NULL)
    {
        if (buttonNum != 0)
        {
            state = ap_joystick->GetRawButton(buttonNum);
        }
    }

    if (ap_gamepad != NULL)
    {
        if (a_dpadDir != GamepadDPad::kCenter)
        {
            //printf("Get dpad <%d> - ", direction);
            if (ap_gamepad->GetDPad() == direction)
            {
                state = true;
            }
            //printf("%d\n", state == true);
        }

        if (buttonNum != 0)
        {
            state = ap_gamepad->GetRawButton(buttonNum);
        }
    }

    if (ap_ds != NULL)
    {
        if (channelNum != 0)
        {
            state = ap_ds->GetDigitalIn(channelNum);
        }
    }

    state = ApplyInvert(state);

    return state;
}

