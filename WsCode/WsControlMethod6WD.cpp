//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : WsControlMethod6WD.cpp
//  @ Date : 1/24/2011
//  @ Author : 
//
//


#include "WsControlMethod6WD.h"
#include "WsDriveVector.h"
#include "InputManager.h"
#include "WsDashboard.h"

WsControlMethod6WD::WsControlMethod6WD(void )
{
    ap_dashboard = WsDashboard::getInstance();

    ap_polarStick = new WsControllerPolarStick(InputManager::AXIS_INDEX_DRIVE_TURN,
                                               InputManager::AXIS_INDEX_DRIVE_THROTTLE);
    ap_inputMgr = InputManager::Instance();

    a_turboScale = .8;
    //a_turboScale = 1;

    ap_curDriveVector = new WsDriveVector();
}

WsControlMethod6WD::~WsControlMethod6WD(void )
{
    delete ap_polarStick;
    ap_polarStick = NULL;
}

float WsControlMethod6WD::getThrottle()
{
    return -1 * a_cachedThrottle;
}

float WsControlMethod6WD::getTurnRate()
{
    return -1 * a_cachedTurn;
}


void WsControlMethod6WD::getDriveVector(WsDriveVector *driveVector)
{

    float speed = 0;
    
    if (driveVector != NULL)
    {
        driveVector->a_direction = ap_polarStick->GetAngle();
        speed = ap_polarStick->GetY();

        
        
        /*
        if( ( getGearShifterState() == WsDriveBase6WD::SHIFT_STATE_HIGH ) &&
            ( getTurboState() == false ) )
            */
        if( getTurboState() == true )
        {
            speed *= a_turboScale;
        }
        
        if(speed < SPEED_DEADBAND && speed > -(SPEED_DEADBAND))
        {
            speed = 0;
        }
/*
        if(ap_polarStick->GetY() <= 0)
        {
            speed *= -1;
        }
*/
        
        driveVector->a_speed = speed;
        driveVector->a_x = ap_polarStick->GetX();
        driveVector->a_y = ap_polarStick->GetY();
        
        //printf("%f %f\n", speed, ap_polarStick->GetY());
        a_cachedThrottle = speed;
        a_cachedTurn = driveVector->a_x;
        
        /*
        printf("Speed: %f  Angle: %f X: %f Y: %f", 
        driveVector->a_speed,
        driveVector->a_direction,
        driveVector->a_x,
        driveVector->a_y);
        */
        ap_curDriveVector->a_direction = driveVector->a_direction;
        ap_curDriveVector->a_speed = driveVector->a_speed;
        ap_curDriveVector->a_x = driveVector->a_x;
        ap_curDriveVector->a_y = driveVector->a_y;
    }

}

WsControlMethod6WD::ShifterCmdT WsControlMethod6WD::getGearShifterState(void )
{
#if 0
    WsDriveBase6WD::ShifterStateT state = WsDriveBase6WD::SHIFT_STATE_LOW;

    if (ap_inputMgr->GetButtonValue( InputManager::BUTTON_INDEX_DRIVE_SHIFTER ) == SHIFTER_INPUT_HIGH )
    {
        state = WsDriveBase6WD::SHIFT_STATE_HIGH;
    }
#else
    WsControlMethod6WD::ShifterCmdT cmd = WsControlMethod6WD::SHIFT_CMD_NONE;

    if (ap_inputMgr->GetButtonValue( InputManager::BUTTON_INDEX_DRIVE_SHIFTER ) == SHIFTER_INPUT_HIGH )
    {
        //printf(" HIGH ");
        cmd = SHIFT_CMD_HIGH;
    }
    else if (ap_inputMgr->GetButtonValue( InputManager::BUTTON_INDEX_DRIVE_SHIFTER ) == SHIFTER_INPUT_LOW )
    {
        //printf(" LOW ");
        cmd = SHIFT_CMD_LOW;
    }
    else
    {
        //printf(" NONE ");
    }

#endif

    return cmd;
}

bool WsControlMethod6WD::getTurboState(void )
{
    bool state = ap_inputMgr->GetButtonValue( InputManager::BUTTON_INDEX_DRIVE_TURBO );
    
    return state;
}

float WsControlMethod6WD::dashGetThrottle()
{
    return ap_curDriveVector->a_speed;
}

float WsControlMethod6WD::dashGetTurn()
{
    return ap_curDriveVector->a_direction;
}

bool WsControlMethod6WD::dashGetTurbo()
{
    return getTurboState();
}

bool WsControlMethod6WD::dashGetShifter()
{
    // This needs to move to the output side
    return !(getGearShifterState() == WsControlMethod6WD::SHIFT_CMD_LOW);
}


