//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Wildstang
//  @ File Name : WsAutonomousMgr.h
//  @ Date : 2/8/2009
//  @ Author : 
//
//


#if !defined(_WSAUTONOMOUSMGR_H)
#define _WSAUTONOMOUSMGR_H

#include <stdio.h>
#include "WsAutoProgramBase.h"

class InputManager;
class WsDriverStationLED;

// TODO MOVE THESE TO MEMBERS
#define PROG_NAME_LEN 15

// Constants for autonomous program dial

#define PROG11_MIN -1
#define PROG11_MAX -.88

#define PROG10_MIN (PROG_11_MAX)
#define PROG10_MAX -.7

#define PROG9_MIN (PROG10_MAX)
#define PROG9_MAX -.55

#define PROG8_MIN (PROG9_MAX)
#define PROG8_MAX -.35

#define PROG7_MIN (PROG8_MAX)
#define PROG7_MAX -.18

#define PROG6_MIN (PROG7_MAX)
#define PROG6_MAX 0

#define PROG5_MIN (PROG6_MAX)
#define PROG5_MAX .12

#define PROG4_MIN (PROG5_MAX)
#define PROG4_MAX .33

#define PROG3_MIN (PROG4_MAX)
#define PROG3_MAX .5

#define PROG2_MIN (PROG3_MAX)
#define PROG2_MAX .7

#define PROG1_MIN (PROG2_MAX)
#define PROG1_MAX 1

// Constants for autonomous starting position
#define RACK_RIGHT_MIN .3
#define RACK_RIGHT_MAX 1

#define RACK_LEFT_MIN -1
#define RACK_LEFT_MAX -.3

// Constants for autonomous starting position
#define COL_LEFT_MIN -1
#define COL_LEFT_MAX -.3

#define COL_MID_MIN -.3
#define COL_MID_MAX .3

#define COL_RIGHT_MIN .3
#define COL_RIGHT_MAX 1

// Constants for autonomous starting position
#define PEG_LOW_MIN .3
#define PEG_LOW_MAX 1

#define PEG_MID_MIN -.3
#define PEG_MID_MAX .3

#define PEG_HIGH_MIN -1
#define PEG_HIGH_MAX -.3


#if 0

// Constants for autonomous starting position
#define POSITION1_MIN .3
#define POSITION1_MAX 1

#define POSITION2_MIN -.3
#define POSITION2_MAX .3

#define POSITION3_MIN -1
#define POSITION3_MAX -.3

// Constants for autonomous delay
#define AUTO_DELAY0_MIN .3
#define AUTO_DELAY0_MAX 1

#define AUTO_DELAY1_MIN -.3
#define AUTO_DELAY1_MAX .3

#define AUTO_DELAY2_MIN -1
#define AUTO_DELAY2_MAX -.3
#endif

/**
* This is the main coordinator for everything related to autonomous.  It handles lockin while disabled and program instantiation and execution when autonomous is enabled
*/
class WsAutonomousMgr
{
public:


    static const bool a_lockInStateOff = false; /*!< A constant for when the lockin state is off */
    static const bool a_lockInStateOn = true;   /*!< A constant for when the lockin state is on */

    WsAutonomousMgr(WsDriverStationLED* p_lockInLed);

    void initializeAutonomousMgr(void);

    ~WsAutonomousMgr();
    void assignDriveBase(WsDriveBase6WD* p_driveBase);
    void assignAppendages(WsLarm* p_larm);
    UINT8 getProgNum(void);
    void getProgName(char* p_name);
    bool getLockState(void);
    bool getLockLedState(void);
    WsAutoProgramBase::RackPositionT getRackPosition(void);
    WsAutoProgramBase::ColPositionT getColPosition(void);
    WsAutoProgramBase::PegHeightT getPegHeight(void);
    float getStartDelay(void);
    void processLockin(void );
    void beginAutonomous(void );
    bool run(void );
    bool isDone(void);
protected:
    InputManager* ap_inputManager;

    WsDriverStationLED* ap_lockInLed;     /*!< The OI LED used to indicate autonomous state */
    WsDriveBase6WD* ap_driveBase;  /*!< The drive base to control */
    WsLarm* ap_larm;

    WsAutoProgramBase* ap_program;        /*!< The program object to interact with */

    UINT8 a_progNum;                      /*!< The program number to run */
    WsAutoProgramBase::RackPositionT a_rackPosition;
    WsAutoProgramBase::ColPositionT a_colPosition;
    WsAutoProgramBase::PegHeightT a_pegHeight;
    WsAutoProgramBase::StartDelayT a_delay;                        /*!< The delay to start with */
    UINT8 a_tempProgNum;                  /*!< An internal program number that can be manipulated before lockin*/
    WsAutoProgramBase::RackPositionT a_temp_rackPosition;
    WsAutoProgramBase::ColPositionT a_temp_colPosition;
    WsAutoProgramBase::PegHeightT a_temp_pegHeight;
    WsAutoProgramBase::StartDelayT a_tempDelay;                    /*!< An internal delay that can be manipulated before lockin*/
    bool a_lockedIn;                      /*!< A flag for whether we're locked in or not */
    bool a_hasRun;                        /*!< A flag for whether autonomous has run (used to protect against running twice without unlocking) */
    bool a_autoDone;

    char a_progName[PROG_NAME_LEN];       /*!< The program name that will be run */

    WsDashboard* ap_dashboard;            /*!< The dashboard to interact with */
};

#endif  //_WSAUTONOMOUSMGR_H
